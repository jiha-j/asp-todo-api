{
  /*
    ==========================================
    appsettings.json - Application Configuration
    ==========================================

    [한글 설명]
    이 파일은 애플리케이션의 설정을 저장하는 JSON 파일입니다.
    Java Spring의 application.properties 또는 application.yml과 동일한 역할을 합니다.
    여기에는 다음을 설정할 수 있습니다:
    1. 로깅 레벨 (Logging Levels)
    2. 데이터베이스 연결 문자열 (Database Connection Strings)
    3. API 키 및 비밀 키 (API Keys and Secrets)
    4. 애플리케이션 특정 설정 (Application-specific Settings)

    [English Explanation]
    This file stores application configuration in JSON format.
    Same role as application.properties or application.yml in Java Spring.
    Can configure:
    1. Logging Levels
    2. Database Connection Strings
    3. API Keys and Secrets
    4. Application-specific Settings

    주의사항 (Important Notes):
    - appsettings.json: 모든 환경에서 사용되는 기본 설정
    - appsettings.Development.json: 개발 환경 설정 (우선순위 높음)
    - appsettings.Production.json: 프로덕션 환경 설정 (우선순위 높음)
  */

  // ==========================================
  // Logging Configuration (로깅 설정)
  // ==========================================
  //
  // [한글] 로그 출력 레벨을 설정합니다.
  //       로그 레벨: Trace < Debug < Information < Warning < Error < Critical
  //       더 높은 레벨은 더 중요한 메시지만 표시합니다.
  //
  // [English] Configure log output levels.
  //           Log levels: Trace < Debug < Information < Warning < Error < Critical
  //           Higher levels show only more important messages.
  //
  // Java Spring 비교:
  // logging.level.root=INFO
  // logging.level.com.example=DEBUG
  "Logging": {
    "LogLevel": {
      // [한글] 기본 로그 레벨: Information
      //       일반적인 정보, 경고, 에러를 표시합니다.
      //
      // [English] Default log level: Information
      //           Shows general info, warnings, and errors.
      "Default": "Information",

      // [한글] Microsoft 네임스페이스의 로그 레벨
      //       ASP.NET Core 내부 로그의 최소 레벨입니다.
      //       Warning으로 설정하여 중요한 메시지만 표시합니다.
      //
      // [English] Log level for Microsoft namespace
      //           Minimum level for ASP.NET Core internal logs.
      //           Set to Warning to show only important messages.
      "Microsoft.AspNetCore": "Warning",

      // [한글] Entity Framework Core 로그 레벨
      //       Information으로 설정하면 실행된 SQL 쿼리를 볼 수 있습니다.
      //       개발 시 유용하지만, 프로덕션에서는 Warning으로 변경하세요.
      //
      // [English] Entity Framework Core log level
      //           Set to Information to see executed SQL queries.
      //           Useful in development, change to Warning in production.
      "Microsoft.EntityFrameworkCore": "Information"
    }
  },

  // ==========================================
  // AllowedHosts (허용된 호스트)
  // ==========================================
  //
  // [한글] 애플리케이션이 응답할 호스트 이름을 제한합니다.
  //       "*"는 모든 호스트를 허용합니다.
  //       프로덕션에서는 특정 도메인만 허용하는 것이 보안상 좋습니다.
  //
  // [English] Restrict host names the application responds to.
  //           "*" allows all hosts.
  //           In production, it's better to allow only specific domains for security.
  //
  // 예시 (Example):
  // "AllowedHosts": "yourdomain.com;www.yourdomain.com"
  "AllowedHosts": "*",

  // ==========================================
  // Database Connection Strings (데이터베이스 연결 문자열)
  // ==========================================
  //
  // [한글] 데이터베이스 연결 정보를 저장합니다.
  //       현재는 In-Memory DB를 사용하므로 주석 처리되어 있습니다.
  //       실제 데이터베이스를 사용할 때 주석을 해제하고 설정하세요.
  //
  // [English] Store database connection information.
  //           Currently commented as we use In-Memory DB.
  //           Uncomment and configure when using real database.
  //
  // Java Spring 비교:
  // spring.datasource.url=jdbc:sqlite:todos.db
  // spring.datasource.driver-class-name=org.sqlite.JDBC
  "ConnectionStrings": {
    // ==========================================
    // SQLite Connection String (SQLite 연결 문자열)
    // ==========================================
    //
    // [한글] SQLite 데이터베이스를 사용하는 경우:
    //       - 파일 기반 데이터베이스 (todos.db 파일 생성)
    //       - 설치 불필요, 간단한 설정
    //       - 소규모 프로젝트에 적합
    //
    // [English] When using SQLite database:
    //           - File-based database (creates todos.db file)
    //           - No installation required, simple setup
    //           - Suitable for small projects
    //
    // Program.cs에서 사용:
    // var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
    // builder.Services.AddDbContext<TodoContext>(options =>
    //     options.UseSqlite(connectionString));
    "DefaultConnection": "Data Source=todos.db",

    // ==========================================
    // SQL Server Connection String
    // ==========================================
    //
    // [한글] SQL Server를 사용하는 경우:
    //       - 엔터프라이즈급 데이터베이스
    //       - 높은 성능과 확장성
    //       - 대규모 프로젝트에 적합
    //
    // [English] When using SQL Server:
    //           - Enterprise-grade database
    //           - High performance and scalability
    //           - Suitable for large projects
    "SqlServerConnection": "Server=(localdb)\\mssqllocaldb;Database=TodoDb;Trusted_Connection=True;MultipleActiveResultSets=true",

    // ==========================================
    // PostgreSQL Connection String
    // ==========================================
    //
    // [한글] PostgreSQL을 사용하는 경우:
    //       - 오픈소스 데이터베이스
    //       - 강력한 기능과 표준 준수
    //       - 중대형 프로젝트에 적합
    //
    // [English] When using PostgreSQL:
    //           - Open-source database
    //           - Powerful features and standards compliance
    //           - Suitable for medium to large projects
    "PostgreSqlConnection": "Host=localhost;Database=tododb;Username=postgres;Password=yourpassword"
  },

  // ==========================================
  // Application Settings (애플리케이션 설정)
  // ==========================================
  //
  // [한글] 애플리케이션 특정 설정을 추가할 수 있습니다.
  //       이러한 설정은 IConfiguration을 통해 코드에서 접근할 수 있습니다.
  //
  // [English] Can add application-specific settings.
  //           These settings can be accessed in code through IConfiguration.
  "AppSettings": {
    // [한글] 애플리케이션 이름
    // [English] Application name
    "ApplicationName": "Todo API",

    // [한글] 애플리케이션 버전
    // [English] Application version
    "Version": "1.0.0",

    // [한글] API 기본 경로
    // [English] API base path
    "ApiBasePath": "/api",

    // [한글] 페이지네이션 기본 크기
    // [English] Default pagination size
    "DefaultPageSize": 10,

    // [한글] 최대 페이지 크기
    // [English] Maximum page size
    "MaxPageSize": 100
  },

  // ==========================================
  // JWT Settings (Optional - JWT 설정)
  // ==========================================
  //
  // [한글] JWT (JSON Web Token) 인증을 사용하는 경우:
  //       토큰 기반 인증 시스템을 구성합니다.
  //       현재 프로젝트에서는 사용하지 않지만, 확장을 위해 포함했습니다.
  //
  // [English] When using JWT (JSON Web Token) authentication:
  //           Configure token-based authentication system.
  //           Not used in current project, but included for extension.
  "JwtSettings": {
    // [한글] JWT 서명에 사용할 비밀 키 (프로덕션에서는 환경 변수로 관리!)
    // [English] Secret key for JWT signing (manage as environment variable in production!)
    "SecretKey": "YourSuperSecretKeyHere_AtLeast32Characters_ChangeInProduction",

    // [한글] JWT 발급자
    // [English] JWT issuer
    "Issuer": "TodoApi",

    // [한글] JWT 수신자
    // [English] JWT audience
    "Audience": "TodoApiUsers",

    // [한글] 토큰 만료 시간 (분)
    // [English] Token expiration time (minutes)
    "ExpirationMinutes": 60
  },

  // ==========================================
  // CORS Settings (CORS 설정)
  // ==========================================
  //
  // [한글] CORS 정책에서 허용할 도메인 목록
  //       Program.cs에서 이 설정을 읽어와 사용할 수 있습니다.
  //
  // [English] List of domains to allow in CORS policy
  //           Can read this setting in Program.cs and use it.
  "CorsSettings": {
    // [한글] 허용된 출처 (개발 환경)
    // [English] Allowed origins (development)
    "AllowedOrigins": [
      "http://localhost:3000",
      "http://localhost:8080",
      "http://localhost:5173"
    ],

    // [한글] 자격 증명 허용 여부 (쿠키, 인증 헤더 등)
    // [English] Allow credentials (cookies, auth headers, etc.)
    "AllowCredentials": true
  }

  // ==========================================
  // Configuration Access in Code (코드에서 설정 접근)
  // ==========================================
  //
  // [한글] C# 코드에서 설정에 접근하는 방법:
  // [English] How to access configuration in C# code:
  //
  // // Constructor에서 IConfiguration 주입
  // public class MyService
  // {
  //     private readonly IConfiguration _configuration;
  //
  //     public MyService(IConfiguration configuration)
  //     {
  //         _configuration = configuration;
  //     }
  //
  //     public void UseSettings()
  //     {
  //         // 단일 값 읽기
  //         var appName = _configuration["AppSettings:ApplicationName"];
  //
  //         // 연결 문자열 읽기
  //         var connectionString = _configuration.GetConnectionString("DefaultConnection");
  //
  //         // 섹션을 객체로 바인딩
  //         var appSettings = _configuration.GetSection("AppSettings").Get<AppSettings>();
  //     }
  // }
  //
  // Java Spring 비교:
  // @Value("${app.name}")
  // private String appName;
  //
  // @ConfigurationProperties(prefix = "app")
  // public class AppSettings { ... }

  // ==========================================
  // Environment-Specific Configuration Files
  // ==========================================
  //
  // [한글] 환경별 설정 파일:
  //       1. appsettings.json - 기본 설정 (모든 환경)
  //       2. appsettings.Development.json - 개발 환경 (오버라이드)
  //       3. appsettings.Production.json - 프로덕션 환경 (오버라이드)
  //
  //       환경은 ASPNETCORE_ENVIRONMENT 환경 변수로 설정합니다:
  //       - Development: 개발 환경
  //       - Staging: 스테이징 환경
  //       - Production: 프로덕션 환경
  //
  // [English] Environment-specific configuration files:
  //           1. appsettings.json - Base config (all environments)
  //           2. appsettings.Development.json - Development (override)
  //           3. appsettings.Production.json - Production (override)
  //
  //           Environment is set via ASPNETCORE_ENVIRONMENT variable:
  //           - Development: Development environment
  //           - Staging: Staging environment
  //           - Production: Production environment

  // ==========================================
  // Security Best Practices (보안 모범 사례)
  // ==========================================
  //
  // [한글] 보안을 위한 권장사항:
  //       1. 민감한 정보(비밀 키, 비밀번호)는 환경 변수로 관리
  //       2. User Secrets (개발 환경): dotnet user-secrets set "Key" "Value"
  //       3. Azure Key Vault (프로덕션): 클라우드 비밀 관리
  //       4. .gitignore에 appsettings.Development.json 추가 고려
  //
  // [English] Security recommendations:
  //           1. Manage sensitive info (secrets, passwords) as environment variables
  //           2. User Secrets (development): dotnet user-secrets set "Key" "Value"
  //           3. Azure Key Vault (production): Cloud secret management
  //           4. Consider adding appsettings.Development.json to .gitignore
}
